/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'
import type { SetNonNullable } from 'type-fest'

import {
  type Client,
  type ClientOptions,
  createClient,
} from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
} from 'lib/seam/connect/options.js'
import { parseOptions } from 'lib/seam/connect/parse-options.js'

export class SeamHttpDevicesUnmanaged {
  client: Client

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = createClient(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpDevicesUnmanaged {
    const opts = { ...options, client }
    if (!isSeamHttpOptionsWithClient(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpDevicesUnmanaged(opts)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpDevicesUnmanaged {
    const opts = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpDevicesUnmanaged(opts)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpDevicesUnmanaged {
    const opts = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpDevicesUnmanaged(opts)
  }

  static async fromPublishableKey(
    publishableKey: string,
    userIdentifierKey: string,
    options: ClientOptions = {},
  ): Promise<SeamHttp> {
    const opts = parseOptions(options)
    const client = createClient({ ...opts, publishableKey })
    const clientSessions = SeamHttpClientSessions.fromClient(client)
    // TODO: clientSessions.getOrCreate({ user_identifier_key: userIdentifierKey })
    const { token } = await clientSessions.create({
      user_identifier_key: userIdentifierKey,
    })
    return SeamHttp.fromClientSessionToken(token, options)
  }

  async get(
    body: DevicesUnmanagedGetBody,
  ): Promise<DevicesUnmanagedGetResponse['device']> {
    const { data } = await this.client.request<DevicesUnmanagedGetResponse>({
      url: '/devices/unmanaged/get',
      method: 'post',
      data: body,
    })
    return data.device
  }

  async list(
    body: DevicesUnmanagedListBody,
  ): Promise<DevicesUnmanagedListResponse['devices']> {
    const { data } = await this.client.request<DevicesUnmanagedListResponse>({
      url: '/devices/unmanaged/list',
      method: 'post',
      data: body,
    })
    return data.devices
  }

  async update(body: DevicesUnmanagedUpdateBody): Promise<void> {
    await this.client.request<DevicesUnmanagedUpdateResponse>({
      url: '/devices/unmanaged/update',
      method: 'post',
      data: body,
    })
  }
}

export type DevicesUnmanagedGetBody = RouteRequestBody<'/devices/unmanaged/get'>

export type DevicesUnmanagedGetResponse = SetNonNullable<
  Required<RouteResponse<'/devices/unmanaged/get'>>
>

export type DevicesUnmanagedListBody =
  RouteRequestBody<'/devices/unmanaged/list'>

export type DevicesUnmanagedListResponse = SetNonNullable<
  Required<RouteResponse<'/devices/unmanaged/list'>>
>

export type DevicesUnmanagedUpdateBody =
  RouteRequestBody<'/devices/unmanaged/update'>

export type DevicesUnmanagedUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/devices/unmanaged/update'>>
>
