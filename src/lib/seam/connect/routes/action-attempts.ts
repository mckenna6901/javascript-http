/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'
import type { Axios } from 'axios'
import type { SetNonNullable } from 'type-fest'

import { createClient } from 'lib/seam/connect/client.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
} from 'lib/seam/connect/options.js'
import { parseOptions } from 'lib/seam/connect/parse-options.js'

export class SeamHttpActionAttempts {
  client: Axios

  constructor(apiKeyOrOptions: string | SeamHttpOptions = {}) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = createClient(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpActionAttempts {
    const opts = { ...options, client }
    if (!isSeamHttpOptionsWithClient(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpActionAttempts(opts)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpActionAttempts {
    const opts = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpActionAttempts(opts)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpActionAttempts {
    const opts = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpActionAttempts(opts)
  }

  async get(
    body: ActionAttemptsGetBody,
  ): Promise<ActionAttemptsGetResponse['action_attempt']> {
    const { data } = await this.client.request<ActionAttemptsGetResponse>({
      url: '/action_attempts/get',
      method: 'post',
      data: body,
    })
    return data.action_attempt
  }

  async list(
    body: ActionAttemptsListBody,
  ): Promise<ActionAttemptsListResponse['action_attempts']> {
    const { data } = await this.client.request<ActionAttemptsListResponse>({
      url: '/action_attempts/list',
      method: 'post',
      data: body,
    })
    return data.action_attempts
  }
}

export type ActionAttemptsGetBody = RouteRequestBody<'/action_attempts/get'>

export type ActionAttemptsGetResponse = SetNonNullable<
  Required<RouteResponse<'/action_attempts/get'>>
>

export type ActionAttemptsListBody = RouteRequestBody<'/action_attempts/list'>

export type ActionAttemptsListResponse = SetNonNullable<
  Required<RouteResponse<'/action_attempts/list'>>
>
