/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'
import type { Axios } from 'axios'
import type { SetNonNullable } from 'type-fest'

import { createAxiosClient } from 'lib/seam/connect/axios.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
} from 'lib/seam/connect/client-options.js'
import { parseOptions } from 'lib/seam/connect/parse-options.js'

export class SeamHttpThermostats {
  client: Axios

  constructor(apiKeyOrOptions: string | SeamHttpOptions) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = createAxiosClient(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpThermostats {
    const opts = { ...options, client }
    if (!isSeamHttpOptionsWithClient(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpThermostats(opts)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpThermostats {
    const opts = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpThermostats(opts)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpThermostats {
    const opts = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpThermostats(opts)
  }

  async cool(
    body: ThermostatsCoolBody,
  ): Promise<ThermostatsCoolResponse['thermostat']> {
    const { data } = await this.client.request<ThermostatsCoolResponse>({
      url: '/thermostats/cool',
      method: 'post',
      data: body,
    })
    return data.thermostat
  }

  async get(
    body: ThermostatsGetBody,
  ): Promise<ThermostatsGetResponse['thermostat']> {
    const { data } = await this.client.request<ThermostatsGetResponse>({
      url: '/thermostats/get',
      method: 'post',
      data: body,
    })
    return data.thermostat
  }

  async heat(
    body: ThermostatsHeatBody,
  ): Promise<ThermostatsHeatResponse['thermostat']> {
    const { data } = await this.client.request<ThermostatsHeatResponse>({
      url: '/thermostats/heat',
      method: 'post',
      data: body,
    })
    return data.thermostat
  }

  async heatCool(
    body: ThermostatsHeatCoolBody,
  ): Promise<ThermostatsHeatCoolResponse['thermostat']> {
    const { data } = await this.client.request<ThermostatsHeatCoolResponse>({
      url: '/thermostats/heat_cool',
      method: 'post',
      data: body,
    })
    return data.thermostat
  }

  async list(
    body: ThermostatsListBody,
  ): Promise<ThermostatsListResponse['thermostats']> {
    const { data } = await this.client.request<ThermostatsListResponse>({
      url: '/thermostats/list',
      method: 'post',
      data: body,
    })
    return data.thermostats
  }

  async off(
    body: ThermostatsOffBody,
  ): Promise<ThermostatsOffResponse['thermostat']> {
    const { data } = await this.client.request<ThermostatsOffResponse>({
      url: '/thermostats/off',
      method: 'post',
      data: body,
    })
    return data.thermostat
  }

  async setFanMode(
    body: ThermostatsSetFanModeBody,
  ): Promise<ThermostatsSetFanModeResponse['thermostat']> {
    const { data } = await this.client.request<ThermostatsSetFanModeResponse>({
      url: '/thermostats/set_fan_mode',
      method: 'post',
      data: body,
    })
    return data.thermostat
  }

  async update(body: ThermostatsUpdateBody): Promise<void> {
    await this.client.request<ThermostatsUpdateResponse>({
      url: '/thermostats/update',
      method: 'post',
      data: body,
    })
  }
}

type ThermostatsCoolBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/cool'>>
>

type ThermostatsCoolResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/cool'>>
>

type ThermostatsGetBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/get'>>
>

type ThermostatsGetResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/get'>>
>

type ThermostatsHeatBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/heat'>>
>

type ThermostatsHeatResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/heat'>>
>

type ThermostatsHeatCoolBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/heat_cool'>>
>

type ThermostatsHeatCoolResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/heat_cool'>>
>

type ThermostatsListBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/list'>>
>

type ThermostatsListResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/list'>>
>

type ThermostatsOffBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/off'>>
>

type ThermostatsOffResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/off'>>
>

type ThermostatsSetFanModeBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/set_fan_mode'>>
>

type ThermostatsSetFanModeResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/set_fan_mode'>>
>

type ThermostatsUpdateBody = SetNonNullable<
  Required<RouteRequestBody<'/thermostats/update'>>
>

type ThermostatsUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/thermostats/update'>>
>
