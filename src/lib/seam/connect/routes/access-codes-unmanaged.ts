/*
 * Automatically generated by generate-routes.ts.
 * Do not edit this file or add other files to this directory.
 */

import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect'
import type { Axios } from 'axios'
import type { SetNonNullable } from 'type-fest'

import { createAxiosClient } from 'lib/seam/connect/axios.js'
import {
  isSeamHttpOptionsWithApiKey,
  isSeamHttpOptionsWithClient,
  isSeamHttpOptionsWithClientSessionToken,
  SeamHttpInvalidOptionsError,
  type SeamHttpOptions,
  type SeamHttpOptionsWithApiKey,
  type SeamHttpOptionsWithClient,
  type SeamHttpOptionsWithClientSessionToken,
} from 'lib/seam/connect/client-options.js'
import { parseOptions } from 'lib/seam/connect/parse-options.js'

export class SeamHttpAccessCodesUnmanaged {
  client: Axios

  constructor(apiKeyOrOptions: string | SeamHttpOptions) {
    const options = parseOptions(apiKeyOrOptions)
    this.client = createAxiosClient(options)
  }

  static fromClient(
    client: SeamHttpOptionsWithClient['client'],
    options: Omit<SeamHttpOptionsWithClient, 'client'> = {},
  ): SeamHttpAccessCodesUnmanaged {
    const opts = { ...options, client }
    if (!isSeamHttpOptionsWithClient(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing client')
    }
    return new SeamHttpAccessCodesUnmanaged(opts)
  }

  static fromApiKey(
    apiKey: SeamHttpOptionsWithApiKey['apiKey'],
    options: Omit<SeamHttpOptionsWithApiKey, 'apiKey'> = {},
  ): SeamHttpAccessCodesUnmanaged {
    const opts = { ...options, apiKey }
    if (!isSeamHttpOptionsWithApiKey(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing apiKey')
    }
    return new SeamHttpAccessCodesUnmanaged(opts)
  }

  static fromClientSessionToken(
    clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'],
    options: Omit<
      SeamHttpOptionsWithClientSessionToken,
      'clientSessionToken'
    > = {},
  ): SeamHttpAccessCodesUnmanaged {
    const opts = { ...options, clientSessionToken }
    if (!isSeamHttpOptionsWithClientSessionToken(opts)) {
      throw new SeamHttpInvalidOptionsError('Missing clientSessionToken')
    }
    return new SeamHttpAccessCodesUnmanaged(opts)
  }

  async convertToManaged(
    body: AccessCodesUnmanagedConvertToManagedBody,
  ): Promise<void> {
    await this.client.request<AccessCodesUnmanagedConvertToManagedResponse>({
      url: '/access_codes/unmanaged/convert_to_managed',
      method: 'post',
      data: body,
    })
  }

  async delete(body: AccessCodesUnmanagedDeleteBody): Promise<void> {
    await this.client.request<AccessCodesUnmanagedDeleteResponse>({
      url: '/access_codes/unmanaged/delete',
      method: 'post',
      data: body,
    })
  }

  async get(
    body: AccessCodesUnmanagedGetBody,
  ): Promise<AccessCodesUnmanagedGetResponse['access_code']> {
    const { data } = await this.client.request<AccessCodesUnmanagedGetResponse>(
      {
        url: '/access_codes/unmanaged/get',
        method: 'post',
        data: body,
      },
    )
    return data.access_code
  }

  async list(
    body: AccessCodesUnmanagedListBody,
  ): Promise<AccessCodesUnmanagedListResponse['access_codes']> {
    const { data } =
      await this.client.request<AccessCodesUnmanagedListResponse>({
        url: '/access_codes/unmanaged/list',
        method: 'post',
        data: body,
      })
    return data.access_codes
  }

  async update(body: AccessCodesUnmanagedUpdateBody): Promise<void> {
    await this.client.request<AccessCodesUnmanagedUpdateResponse>({
      url: '/access_codes/unmanaged/update',
      method: 'patch',
      data: body,
    })
  }
}

export type AccessCodesUnmanagedConvertToManagedBody = SetNonNullable<
  Required<RouteRequestBody<'/access_codes/unmanaged/convert_to_managed'>>
>

export type AccessCodesUnmanagedConvertToManagedResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/unmanaged/convert_to_managed'>>
>

export type AccessCodesUnmanagedDeleteBody = SetNonNullable<
  Required<RouteRequestBody<'/access_codes/unmanaged/delete'>>
>

export type AccessCodesUnmanagedDeleteResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/unmanaged/delete'>>
>

export type AccessCodesUnmanagedGetBody = SetNonNullable<
  Required<RouteRequestBody<'/access_codes/unmanaged/get'>>
>

export type AccessCodesUnmanagedGetResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/unmanaged/get'>>
>

export type AccessCodesUnmanagedListBody = SetNonNullable<
  Required<RouteRequestBody<'/access_codes/unmanaged/list'>>
>

export type AccessCodesUnmanagedListResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/unmanaged/list'>>
>

export type AccessCodesUnmanagedUpdateBody = SetNonNullable<
  Required<RouteRequestBody<'/access_codes/unmanaged/update'>>
>

export type AccessCodesUnmanagedUpdateResponse = SetNonNullable<
  Required<RouteResponse<'/access_codes/unmanaged/update'>>
>
